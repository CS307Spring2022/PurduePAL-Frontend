{"ast":null,"code":"var _jsxFileName = \"/Users/chintansawla/Documents/GitHub/PurduePAL-Frontend/pal-fe/src/components/CreatePost.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport { Button, Fab, IconButton, Stack, TextField } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport AddAPhotoIcon from \"@mui/icons-material/AddAPhoto\";\nimport { useTheme, useMediaQuery } from \"@mui/material\";\nimport * as React from \"react\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOption() {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === \"string\") {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      const {\n        inputValue\n      } = params; // Suggest the creation of a new value\n\n      const isExisting = options.some(option => inputValue === option.title);\n\n      if (inputValue !== \"\" && !isExisting) {\n        filtered.push({\n          inputValue,\n          title: `Add \"${inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === \"string\") {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n      children: option.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 40\n    }, this),\n    sx: {\n      width: \"50%\"\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Choose Topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_s(FreeSoloCreateOption, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = FreeSoloCreateOption;\nconst top100Films = [{\n  title: \"Marvel\",\n  year: 1994\n}, {\n  title: \"DC\",\n  year: 1972\n}];\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"#333\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4\n};\nconst ariaLabel = {\n  \"aria-label\": \"description\"\n};\nexport const CreatePost = () => {\n  _s2();\n\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const fabPosWidth = matches ? \"80px\" : \"16px\";\n  const fabPosHeight = matches ? \"22px\" : \"40px\";\n  const [postText, setPostText] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  const [post, setPost] = useState(false);\n\n  const handleSubmit = () => {\n    //dummy code to handle creating post\n    setPost(true);\n    setInterval(setPost(true), 1000);\n    setPost(false);\n    console.log(post);\n  };\n\n  const [errorText, setErrorText] = useState(false);\n\n  const handleTextLength = text => text.length > 280 || text.length <= 0 ? setErrorText(true) : setErrorText(false);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      sx: {\n        position: \"fixed\",\n        bottom: fabPosWidth,\n        right: fabPosHeight\n      },\n      onClick: handleOpen,\n      children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            color: \"#eee\",\n            id: \"modal-modal-title\",\n            variant: \"h6\",\n            component: \"h2\",\n            children: \"Create a Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FreeSoloCreateOption, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            multiline: true,\n            rows: 4,\n            error: errorText,\n            fullWidth: true,\n            placeholder: \"Type something\",\n            inputProps: ariaLabel,\n            onChange: e => {\n              setPostText(e.target.value);\n              handleTextLength(postText);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"row\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              color: \"primary\",\n              children: /*#__PURE__*/_jsxDEV(AddAPhotoIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: errorText ? true : false,\n            variant: \"contained\",\n            onClick: handleSubmit,\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(CreatePost, \"uvKkk14JRBVCUp4iqEvaSyW/KAs=\", false, function () {\n  return [useTheme, useMediaQuery];\n});\n\n_c2 = CreatePost;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FreeSoloCreateOption\");\n$RefreshReg$(_c2, \"CreatePost\");","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/PurduePAL-Frontend/pal-fe/src/components/CreatePost.jsx"],"names":["useState","Box","Typography","Modal","Button","Fab","IconButton","Stack","TextField","AddIcon","AddAPhotoIcon","useTheme","useMediaQuery","React","Autocomplete","createFilterOptions","filter","FreeSoloCreateOption","value","setValue","event","newValue","title","inputValue","options","params","filtered","isExisting","some","option","push","top100Films","props","width","year","style","position","top","left","transform","bgcolor","border","boxShadow","p","ariaLabel","CreatePost","theme","matches","breakpoints","down","fabPosWidth","fabPosHeight","postText","setPostText","open","setOpen","handleOpen","handleClose","post","setPost","handleSubmit","setInterval","console","log","errorText","setErrorText","handleTextLength","text","length","bottom","right","e","target"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport { Button, Fab, IconButton, Stack, TextField } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport AddAPhotoIcon from \"@mui/icons-material/AddAPhoto\";\nimport { useTheme, useMediaQuery } from \"@mui/material\";\n\nimport * as React from \"react\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\n\nconst filter = createFilterOptions();\n\nexport default function FreeSoloCreateOption() {\n  const [value, setValue] = React.useState(null);\n\n  return (\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === \"string\") {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some(\n          (option) => inputValue === option.title\n        );\n        if (inputValue !== \"\" && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id=\"free-solo-with-text-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\n      sx={{ width: \"50%\" }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label=\"Choose Topic\" />\n      )}\n    />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: \"Marvel\", year: 1994 },\n  { title: \"DC\", year: 1972 },\n  \n];\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"#333\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\nconst ariaLabel = { \"aria-label\": \"description\" };\n\nexport const CreatePost = () => {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const fabPosWidth = matches ? \"80px\" : \"16px\";\n  const fabPosHeight = matches ? \"22px\" : \"40px\";\n  const [postText, setPostText] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const [post, setPost] = useState(false);\n  const handleSubmit = () => {\n    //dummy code to handle creating post\n    setPost(true);\n    setInterval(setPost(true), 1000);\n    setPost(false);\n    console.log(post);\n  };\n  const [errorText, setErrorText] = useState(false);\n  const handleTextLength = (text) =>\n    text.length > 280 || text.length <= 0\n      ? setErrorText(true)\n      : setErrorText(false);\n\n  return (\n    <div>\n      <Fab\n        color=\"primary\"\n        aria-label=\"add\"\n        sx={{\n          position: \"fixed\",\n          bottom: fabPosWidth,\n          right: fabPosHeight,\n        }}\n        onClick={handleOpen}\n      >\n        <AddIcon />\n      </Fab>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Stack spacing={2}>\n            <Typography\n              color={\"#eee\"}\n              id=\"modal-modal-title\"\n              variant=\"h6\"\n              component=\"h2\"\n            >\n              Create a Post\n            </Typography>\n            <FreeSoloCreateOption />\n            <TextField\n              multiline\n              rows={4}\n              error={errorText}\n              fullWidth\n              placeholder=\"Type something\"\n              inputProps={ariaLabel}\n              onChange={(e) => {\n                setPostText(e.target.value);\n                handleTextLength(postText);\n              }}\n            />\n            <Stack direction={\"row\"}>\n              <IconButton color=\"primary\">\n                <AddAPhotoIcon />\n              </IconButton>\n            </Stack>\n            <Button\n              disabled={errorText ? true : false}\n              variant=\"contained\"\n              onClick={handleSubmit}\n            >\n              Post\n            </Button>\n          </Stack>\n        </Box>\n      </Modal>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}